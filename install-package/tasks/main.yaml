---
- name: "Check if OS is supported ..."
  assert:
    that:
      - target_distribution in ['ubuntu','debian']
      - target_distribution_version in ["22.04","20.04","23.10","12"]
    fail_msg: "Unsupported distribution: {{ target_distribution }} {{ target_distribution_version }}"
    quiet: true

- name: "Configuration ..."
  set_fact:
    package_list: []
    prerequisite_list: []
    repository_list: []
    require_list: []
    purge_list: []

- name: "..."
  fail:
    msg: "missing install_packages ..."
  when: install_packages is not defined

- name: "Slurp packages list ..."
  set_fact:
    packages: "{{ install_packages }}"

- block:
    - name: "Check if {{ host_policy_dir }}/firstboot is present ..."
      stat:
        path: "{{ host_policy_dir }}/firstboot"
      register: initial_setup

    - fail:
        msg: "Refusing ... firstboot process was already executed on the host ..."
      when: initial_setup.stat.exists and firstboot_do_it_anyway is not defined and firstboot_auto is not defined

    - name: "Firstboot cleanups marker ..."
      set_fact:
        _firstboot_cleanups: true
      when: not initial_setup.stat.exists or firstboot_do_it_anyway is defined

    - name: "Select packages to purge (firstboot setup) ..."
      set_fact:
        firstboot_purge: "{{ packages | select('regex', '^\\^') | map('regex_replace', '^\\^', '.') | list }}"

    - name: "Append packages to purge (firstboot setup) ..."
      set_fact:
        packages: "{{ packages + firstboot_purge }}"
      when: not initial_setup.stat.exists or firstboot_do_it_anyway is defined
  when: firstboot is defined or firstboot_packages is defined or firstboot_auto is defined

- name: "Remove any firstboot packages ..."
  set_fact:
    packages: "{{ packages | reject('regex', '^\\^') | list }}"

- name: "Stop services ..."
  service:
    name: "{{ stop_service }}"
    state: stopped
  loop:
    - polkit
    - unattended-upgrades
    - packagekit
  loop_control:
    loop_var: stop_service
  ignore_errors: yes
  when: _firstboot_cleanups is defined

- name: "Select packages to purge ..."
  set_fact:
    purge_list: "{{ packages | select('regex', '^-') | map('regex_replace', '^-', '') | list }}"
    packages: "{{ packages | reject('regex', '^-') | list }}"

- name: "Prepare packages list ..."
  set_fact:
     package_list: "{{ package_list + [ { 'name': package, 'manifest': playbook_dir + '/site/packages/' + target_distribution + '/' + target_distribution_version + '/' + package } ] + [ { 'name': package, 'manifest': role_path + '/files/packages/' + target_distribution + '/' + target_distribution_version + '/' + package } ] }}"
  loop: "{{ packages }}"
  loop_control:
    loop_var: package
    label: "{{ package }}"

- name: "Process packages ... (PASS 1) ..."
  include_tasks: "packages/process-package.yml"
  vars:
    process_require: true
  loop: "{{ package_list }}"
  when: "package.manifest is exists"
  loop_control:
    loop_var: package
    label: "{{ package.name }}"

- name: "Normalize require list ..."
  set_fact:
    require_list: "{{ require_list | unique }}"

# Simple dependency processing (no circular dependencies)
- name: "Process require list ..."
  block:
    - name: "Initialize packages list ..."
      set_fact:
        package_list: []
    - name: "Prepare package list (require) ..."
      set_fact:
        package_list: "{{ package_list + [ { 'name': package, 'manifest': playbook_dir + '/site/packages/' + target_distribution + '/' + target_distribution_version + '/' + package } ] + [ { 'name': package, 'manifest': role_path + '/files/packages/' + target_distribution + '/' + target_distribution_version + '/' + package } ] }}"
        packages: "{{ packages + [ package ] }}"
      loop: "{{ require_list }}"
      loop_control:
        loop_var: package
      when: package not in packages

    - name: "Process packages ... (PASS 2) ..."
      include_tasks: "packages/process-package.yml"
      vars:
        process_require: false
      loop: "{{ package_list }}"
      when: "package.manifest is exists"
      loop_control:
        loop_var: package
        label: "{{ package.name }}"
  when: require_list | length > 0

- name: "Normalize prerequisite list ..."
  set_fact:
    prerequisite_list: "{{ prerequisite_list | unique }}"

- name: "Normalize repository list ..."
  set_fact:
    repository_list: "{{ repository_list | unique }}"

- name: "Normalize purge list ..."
  set_fact:
    purge_list: "{{ purge_list | difference(packages) | difference(prerequisite_list) | unique }}"

- name: "Normalize packages list ..."
  set_fact:
    packages: "{{ packages | unique }}"

- name: "Remove meta packages from list ..."
  set_fact:
    packages: "{{ packages | reject('regex', '^\\.') | list }}"

- name: "Information ..."
  debug:
    msg:
      - "TARGET:        {{ target_distribution | capitalize }} {{ target_distribution_version }}"
      - "PACKAGES:      {{ packages }}"
      - "REPOSITORIES:  {{ repository_list }}"
      - "PREREQUISITES: {{ prerequisite_list }}"
      - "PURGE:         {{ purge_list }}"

- name: "Install prerequisites packages ..."
  include_tasks: "packages/install-prerequisites.yml"
  when: prerequisite_list | length > 0

- name: "Purge packages ..."
  include_tasks: "packages/purge-packages.yml"
  when: purge_list | length > 0

- name: "Install prerequisites packages ..."
  include_tasks: "packages/install-prerequisites.yml"
  when: prerequisite_list | length > 0

- name: "Install respositories ..."
  include_role:
    name: wyga/install-repository
  loop: "{{ repository_list }}"
  when: repository_list | length > 0
  loop_control:
    loop_var: repository_name

- name: "."
  debug:
    msg: "Installing packages ..."

- name: "Install packages ..."
  include_tasks: "packages/install-packages.yml"


# on Ubuntu 22.04 services stay running after package purge (bug?)
- name: "Firstboot cleanup ..."
  block:
    - name: "Cleanup /var/lib/apt/lists ..."
      shell: "find /var/lib/apt/lists /var/cache/apt -type f -delete && apt-get clean && apt-get update -qq"
    - name: "Stop services ..."
      command: "systemctl stop {{ stop_service }}"
      loop:
        - polkit
        - unattended-upgrades
        - packagekit
      loop_control:
        loop_var: stop_service
      ignore_errors: yes
  when: _firstboot_cleanups is defined

- name: "Create {{ host_policy_dir }}/firstboot ..."
  block:
    - name: "Create {{ host_policy_dir }} directory ..."
      file:
        path: "{{ host_policy_dir }}"
        state: directory
    - name: "Create firstboot marker ..."
      copy:
        content: '# Do not remove this file...'
        dest: "{{ host_policy_dir }}/firstboot"
        mode: "0600"
        owner: "root"
        group: "root"

---
- name: "Check if OS is supported ..."
  assert:
    that:
      - target_distribution in [ 'ubuntu', 'debian' ]
      - target_distribution_version in [ "20.04", "22.04", "24.04", "12", "13" ]
    fail_msg: "Unsupported distribution: {{ target_distribution | capitalize }} {{ target_distribution_version }}"
    quiet: true

- name: "Configuration ..."
  set_fact:
    package_list: []
    prerequisite_list: []
    repository_list: []
    require_list: []
    purge_list: []
    enable_services: []

- name: "Use packages parameter ..."
  set_fact:
    install_packages: "{{ packages }}"
  when: packages is defined

- name: "..."
  fail:
    msg: "missing install_packages ..."
  when: install_packages is not defined

- name: "Slurp packages list ..."
  set_fact:
    __packages: "{{ install_packages }}"

- name: "Remove packages not intended for the {{ target_distribution }} distribution ..."
  set_fact:
    __packages: "{{ __packages | reject('regex','^.+@(?!(' ~ target_distribution ~ '|' ~ target_distribution ~ '-' ~ target_distribution_version ~ ')).+$') | list }}"

- name: "Strip target distribution suffix ..."
  set_fact:
    __packages: "{{ __packages | map('regex_replace', '@(' ~ target_distribution ~ '|' ~ target_distribution ~ '-' ~ target_distribution_version ~ ')', '') | list }}"

- name: "Remove packages not intended for the {{ target_arch }} architecture ..."
  set_fact:
    __packages: "{{ __packages | reject('regex','^.+%(?!(' ~ target_arch ~ ')$).+$') | list }}"

- name: "Strip target architecture suffix ..."
  set_fact:
    __packages: "{{ __packages | map('regex_replace', '%' ~ target_arch ~ '$', '') | list }}"

- name: "Select packages to purge ..."
  set_fact:
    purge_list: "{{ __packages | select('regex', '^-') | map('regex_replace', '^-', '') | list }}"
    __packages: "{{ __packages | reject('regex', '^-') | list }}"

- name: "Prepare packages list ..."
  set_fact:
     package_list: "{{ package_list + [ { 'name': ip_package, 'manifest': playbook_dir + '/local/packages/' + target_distribution + '/' + target_distribution_version + '/' + ip_package } ] + [ { 'name': ip_package, 'manifest': role_path + '/files/packages/' + target_distribution + '/' + target_distribution_version + '/' + ip_package } ] }}"
  loop: "{{ __packages }}"
  loop_control:
    loop_var: ip_package
    label: "{{ ip_package }}"

- name: "Process packages ... (PASS 1) ..."
  include_tasks: "packages/process-package.yml"
  vars:
    process_require: true
  loop: "{{ package_list }}"
  when: "ip_package.manifest is exists"
  loop_control:
    loop_var: ip_package
    label: "{{ ip_package.name }}"

- name: "Normalize require list ..."
  set_fact:
    require_list: "{{ require_list | unique }}"

# Simple dependency processing (no circular dependencies)
- name: "Process require list ..."
  block:
    - name: "Initialize packages list ..."
      set_fact:
        package_list: []
    - name: "Prepare package list (require) ..."
      set_fact:
        package_list: "{{ package_list + [ { 'name': ip_package, 'manifest': playbook_dir + '/site/packages/' + target_distribution + '/' + target_distribution_version + '/' + ip_package } ] + [ { 'name': ip_package, 'manifest': role_path + '/files/packages/' + target_distribution + '/' + target_distribution_version + '/' + ip_package } ] }}"
        __packages: "{{ __packages + [ ip_package ] }}"
      loop: "{{ require_list }}"
      loop_control:
        loop_var: ip_package
      when: ip_package not in __packages

    - name: "Process packages ... (PASS 2) ..."
      include_tasks: "packages/process-package.yml"
      vars:
        process_require: false
      loop: "{{ package_list }}"
      when: "ip_package.manifest is exists"
      loop_control:
        loop_var: ip_package
        label: "{{ ip_package.name }}"
  when: require_list | length > 0

- name: "Normalize prerequisite list ..."
  set_fact:
    prerequisite_list: "{{ prerequisite_list | unique }}"

- name: "Normalize repository list ..."
  set_fact:
    repository_list: "{{ repository_list | unique }}"

- name: "Normalize purge list ..."
  set_fact:
    purge_list: "{{ purge_list | difference(__packages) | difference(prerequisite_list) | unique }}"

- name: "Remove packages not intended for the {{ target_distribution }} distribution ..."
  set_fact:
    __packages: "{{ __packages | reject('regex','^.+@(?!(' ~ target_distribution ~ '|' ~ target_distribution ~ '-' ~ target_distribution_version ~ ')).+$') | list }}"

- name: "Strip target distribution suffix ..."
  set_fact:
    __packages: "{{ __packages | map('regex_replace', '@(' ~ target_distribution ~ '|' ~ target_distribution ~ '-' ~ target_distribution_version ~ ')', '') | list }}"

- name: "Remove packages not intended for the {{ target_arch }} architecture ..."
  set_fact:
    __packages: "{{ __packages | reject('regex','^.+%(?!(' ~ target_arch ~ ')$).+$') | list }}"

- name: "Strip target architecture suffix ..."
  set_fact:
    __packages: "{{ __packages | map('regex_replace', '%' ~ target_arch ~ '$', '') | list }}"

- name: "Normalize packages list ..."
  set_fact:
    __packages: "{{ __packages | unique }}"

- name: "Remove meta packages from list ..."
  set_fact:
    __packages: "{{ __packages | reject('regex', '^\\.') | list }}"

- name: "Normalize service list ..."
  set_fact:
    enable_services: "{{ enable_services | unique }}"

- name: "Information ..."
  debug:
    msg:
      - "TARGET:        {{ target_distribution | capitalize }} {{ target_distribution_version }} / {{ target_arch }}"
      - "PACKAGES:      {{ __packages | sort}}"
      - "REPOSITORIES:  {{ repository_list | sort }}"
      - "PREREQUISITES: {{ prerequisite_list | sort }}"
      - "PURGE:         {{ purge_list | sort }}"
      - "SERVICES:      {{ enable_services | sort }}"

- name: "Install prerequisites packages ..."
  include_tasks: "packages/install-prerequisites.yml"
  when: prerequisite_list | length > 0

- name: "Purge packages ..."
  include_tasks: "packages/purge-packages.yml"
  when: purge_list | length > 0

- name: "Install prerequisites packages ..."
  include_tasks: "packages/install-prerequisites.yml"
  when: prerequisite_list | length > 0

- name: "Install respositories ..."
  include_role:
    name: wyga/install-repository
  loop: "{{ repository_list }}"
  loop_control:
    loop_var: repository_loop
    label: "{{ repository_loop }}"
  vars:
    repository: "{{ repository_loop }}"
  when: repository_list | length > 0

- name: "."
  debug:
    msg: "Installing packages ..."

- name: "Install packages ..."
  include_tasks: "packages/install-packages.yml"

- name: "Enable services ..."
  systemd:
    name: "{{ service }}"
    enabled: true
    masked: false
    daemon_reload: true
  loop: "{{ enable_services }}"
  loop_control:
    loop_var: service
    label: "{{ service }}"
  when: enable_services | length > 0

- name: "Firewall / Select profile ..."
  set_fact:
    firewall_profile: "{{ host.firewall.profile | default('docker') }}"

- name: "Firewall / Veryfiy profile ..."
  assert:
    that:
      - firewall_profile is in [ 'docker', 'kvm' ]

- name: "Firewall / Check kvm profile ..."
  assert:
    that:
      - host.setup.kvm.network.subnet is defined
    msg: "Missing KVM subnet configuration ..."
  when: host.firewall.profile is defined and firewall_profile == 'kvm'

- name: "Firewall / Prepare rule buckets ..."
  set_fact:
    fwrules: []
    fw_input_rules: []
    fw_forward_rules: []
    fw_output_rules: []
    fw_docker_drop_rules: []
    fw_docker_reject_rules: []

- name: "Firewall / Process input rules ..."
  block:
    - name: "Firewall / Process input rules ..."
      include_tasks: rule.yaml
      loop: "{{ host.firewall.input }}"
      loop_control:
        loop_var: rule
        label: "{{ rule }}"
    - name: "Firewall / Copy input rules ..."
      set_fact:
        fw_input_rules: "{{ fwrules }}"
        fwrules: []
  when: host.firewall.input is defined

- name: "Firewall / Process forward rules ..."
  block:
    - name: "Firewall / Process forward rules ..."
      include_tasks: rule.yaml
      loop: "{{ host.firewall.forward }}"
      loop_control:
        loop_var: rule
        label: "{{ rule }}"
    - name: "Firewall / Copy forward rules ..."
      set_fact:
        fw_forward_rules: "{{ fwrules }}"
        fwrules: []
  when: host.firewall.forward is defined

- name: "Firewall / Process output rules ..."
  block:
    - name: "Firewall / Process output rules ..."
      include_tasks: rule.yaml
      loop: "{{ host.firewall.output }}"
      loop_control:
        loop_var: rule
        label: "{{ rule }}"
    - name: "Firewall / Copy output rules ..."
      set_fact:
        fw_output_rules: "{{ fwrules }}"
        fwrules: []
  when: host.firewall.output is defined

- name: "Firewall / Process docker drop rules ..."
  block:
    - name: "Firewall / Process docker drop rules ..."
      include_tasks: rule.yaml
      loop: "{{ host.firewall.docker.drop }}"
      loop_control:
        loop_var: rule
        label: "{{ rule }}"
    - name: "Firewall / Copy docker drop rules ..."
      set_fact:
        fw_docker_drop_rules: "{{ fwrules }}"
        fwrules: []
  when: host.firewall.docker.drop is defined

- name: "Firewall / Process docker reject rules ..."
  block:
    - name: "Firewall / Process docker reject rules ..."
      include_tasks: rule.yaml
      loop: "{{ host.firewall.docker.reject }}"
      loop_control:
        loop_var: rule
        label: "{{ rule }}"
    - name: "Firewall / Copy docker reject rules ..."
      set_fact:
        fw_docker_reject_rules: "{{ fwrules }}"
        fwrules: []
  when: host.firewall.docker.reject is defined

- name: "Firewall / Install iptables persistent ..."
  include_role:
    name: wyga/install-package-override
  vars:
    packages:
      - -ufw
      - netfilter-persistent
      - iptables-persistent

- name: "Firewall / Prepare site configuration directory... "
  file:
    path: "/etc/site"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: "Firewall / Prepare firewall configuration directory... "
  file:
    path: "/etc/site/firewall"
    state: directory
    owner: root
    group: root
    mode: 0750

- name: "Firewall / Checking master configuration ..."
  template:
    src: "firewall/{{ firewall_profile }}/rules"
    dest: "/etc/site/firewall/master"
    group: root
    owner: root
    mode: 0640
  vars:
    profile: "{{ firewall_profile }}"
  register: firewall_master

- name: "Firewall / Check if restart is required ..."
  set_fact:
    firewall_restart: "{{ firewall_master.changed }}"

- name: "Firewall / Check if master template is loaded ..."
  block:
    - name: "Firewall / Check if master template is loaded ..."
      command: iptables -C INPUT -m comment --comment MANAGED-FIREWALL
      no_log: true
      changed_when: false
  rescue:
    - name: "Firewall / Force firewall restart ..."
      set_fact:
        firewall_restart: true

- name: "Firewall / Generate firewall configuration (persistent) ..."
  template:
    src: "firewall/{{ firewall_profile }}/rules"
    dest: "/etc/iptables/rules.v4"
    group: root
    owner: root
    mode: 0644
  vars:
    firewall_rules: true
    profile: "{{ firewall_profile }}"
  register: rulesV4

- name: "Firewall / Render runtime firewall configuration ..."
  set_fact:
     firewall_rendered_rules: "{{ lookup('template', 'firewall/{{ firewall_profile }}/rules-apply') }}"

- name: "Firewall / Apply firewall rules ..."
  command:
    cmd: iptables-restore --noflush
    stdin: "{{ firewall_rendered_rules }}"
  changed_when: rulesV4.changed

- name: "Firewall / Restart netfilter-persistent service ..."
  systemd:
    name: netfilter-persistent
    enabled: true
    daemon_reload: true
    state: restarted
    masked: no
  when: firewall_restart

- name: "Firewall / Trigger service restart ..."
  block:
    - name: "Firewall / Collect services facts ..."
      ansible.builtin.service_facts:

    - name: "Firewall / Service list to restart ..."
      set_fact:
        restart_services: "{{ host.firewall.restart }}"
      when: host.firewall.restart is defined

    - name: "Firewall / Restart docker (if installed) ..."
      set_fact:
        restart_services:
          - docker.service
      when: host.firewall.restart is not defined

    - name: "Firewall / Restarting service ..."
      systemd:
        name: "{{ service }}"
        state: restarted
      loop: "{{ restart_services }}"
      loop_control:
        loop_var: service
        label: "{{ service }}"
      when: "service in ansible_facts.services and ansible_facts.services[service].status != 'not-found'"
  when: firewall_restart and (host.firewall.restart is defined or firewall_profile == 'docker')

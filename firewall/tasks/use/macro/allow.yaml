---
- name: "Process allow/any ..."
  block:
    - name: "Append rule ..."
      set_fact:
        fwrules: "{{ fwrules + [ { 'any': 'any' } ] }}"
        rule_parsed: true
  when: rule.allow == 'any'

- name: "Process allow/icmp ..."
  block:
    - name: "Append common icmp rules ..."
      set_fact:
        fwrule_icmp:
          - { 'icmptype': 'destination-unreachable', 'match': 'icmp', 'proto': 'icmp' }
          - { 'icmptype': 'echo-request', 'match': 'icmp', 'proto': 'icmp' }
          - { 'icmptype': 'time-exceeded', 'match': 'icmp', 'proto': 'icmp' }
          - { 'icmptype': 'parameter-problem', 'match': 'icmp', 'proto': 'icmp' }

    - name: "Append rule ..."
      set_fact:
        fwrules: "{{ fwrules + fwrule_icmp }}"
        rule_parsed: true
  when: rule.allow == 'icmp'

- name: "Process allow/http ..."
  block:
    - name: "Append http/https/http3 rules ..."
      set_fact:
        fwrule_http:
          - { 'dport': '80', 'match': 'tcp', 'proto': 'tcp' }
          - { 'dport': '443', 'match': 'tcp', 'proto': 'tcp' }
          - { 'dport': '443', 'match': 'udp', 'proto': 'udp' }

    - name: "Append rule ..."
      set_fact:
        fwrules: "{{ fwrules + fwrule_http }}"
        rule_parsed: true
  when: rule.allow == 'http'

- name: "Process allow/nebula ..."
  block:
    - name: "Append allow/nebula rules ..."
      set_fact:
        fwrule_nebula:
          - { 'dport': '4242', 'match': 'udp', 'proto': 'udp' }
    - name: "Append rule ..."
      set_fact:
        fwrules: "{{ fwrules + fwrule_nebula }}"
        rule_parsed: true
  when: rule.allow == 'nebula'

- name: "Process allow/overlay ..."
  block:
    - name: "Append allow/overlay rules ..."
      set_fact:
        fwrule_overlay:
          - { 'iface': 'overlay0' }
    - name: "Append rule ..."
      set_fact:
        fwrules: "{{ fwrules + fwrule_overlay }}"
        rule_parsed: true
  when: rule.allow == 'overlay'

- name: "Process allow/vpn ..."
  block:
    - name: "Append allow/vpn rules ..."
      set_fact:
        fwrule_vpn:
          - { 'iface': 'overlay0' }
          - { 'dport': '4242', 'match': 'udp', 'proto': 'udp' }
    - name: "Append rule ..."
      set_fact:
        fwrules: "{{ fwrules + fwrule_vpn }}"
        rule_parsed: true
  when: rule.allow == 'vpn'

- name: "Process allow/ssh ..."
  block:
    - name: "Extract config name ..."
      set_fact:
        ssh_firewall_file: "{{ rule.allow | split('/') | last | lower }}"
      when: rule.allow is regex('(?i)^ssh/[a-z][a-z0-9-]{1,18}[a-z0-9]$')

    - name: "Select 'any' config name ..."
      set_fact:
        ssh_firewall_file: "any"
      when: rule.allow is regex('(?i)^ssh$')

    - name: "Load ssh hosts ..."
      include_vars:
        file: "local/firewall/ssh/{{ ssh_firewall_file }}"
        name: ssh_firewall_hosts

    - name: "ERROR ..."
      fail:
      when: ssh_firewall_hosts.hosts is not defined

    - name: "Append rule ..."
      set_fact:
        fwrules: "{{ fwrules + [ { 'match': 'tcp', 'proto': 'tcp', 'src': ssh_firewall_hosts.hosts, 'dport': 22 } ] }}"
        rule_parsed: true
  when: rule.allow is regex('(?i)^ssh/[a-z][a-z0-9-]{1,18}[a-z0-9]$') or rule.allow is regex('(?i)^ssh$')

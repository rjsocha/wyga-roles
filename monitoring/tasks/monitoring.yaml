---
- name: "Role init ..."
  set_fact:
    use_or_merge: false

- name: "Check and prepare template configuration ..."
  block:
    - name: "Check configuration ..."
      assert:
        that:
          - >
            (host.setup.monitoring.use is defined and host.setup.monitoring.merge is not defined)
            or (host.setup.monitoring.use is not defined and host.setup.monitoring.merge is defined)
    - name: "Select use strategy ..."
      set_fact:
        use_or_merge: true
        use_or_merge_name: "{{ host.setup.monitoring.use }}"
      when: host.setup.monitoring.use is defined

    - name: "Select merge strategy ..."
      set_fact:
        use_or_merge: true
        use_or_merge_name: "{{ host.setup.monitoring.merge }}"
      when: host.setup.monitoring.merge is defined
  when: host.setup.monitoring.use is defined or host.setup.monitoring.merge is defined

- name: "Load monitoring/use template ..."
  include_vars:
    file: "{{ monitoring_template }}"
    name: monitoring_use_template
  loop: "{{ query('first_found', params) }}"
  loop_control:
    loop_var: monitoring_template
  vars:
    params:
      skip: false
      files:
        - "{{ playbook_dir}}/local/monitoring/{{ use_or_merge_name }}"
        - "{{ role_path }}/monitoring/{{ use_or_merge_name }}"
  when: use_or_merge

- name: "Prepare monitoring configuration (use) ..."
  set_fact:
    monitoring_config: "{{ monitoring_use_template.monitoring | combine(host.setup.monitoring) | combine({'use': omit}) }}"
  when: host.setup.monitoring.use is defined and monitoring_use_template.monitoring is defined

- name: "Prepare monitoring configuration (merge) ..."
  set_fact:
    monitoring_config: "{{ monitoring_use_template.monitoring | combine(host.setup.monitoring,list_merge='prepend_rp') | combine({'merge': omit}) }}"
  when: host.setup.monitoring.merge is defined and monitoring_use_template.monitoring is defined

- name: "Prepare monitoring configuration ..."
  set_fact:
    monitoring_config: "{{ host.setup.monitoring }}"
  when: not use_or_merge

- name: "Check configuration ..."
  assert:
    that:
      - monitoring_config.host is defined and monitoring_config.host | type_debug == 'list'
      - confidential.monitoring is defined or secret.monitoring is defined

- name: "Load monitoring secrets ..."
  set_fact:
    msecrets: "{{ secret.monitoring }}"
    msecrets_source: "secret"
  when: secret.monitoring is defined

- name: "Load monitoring secrets ..."
  set_fact:
    msecrets: "{{ confidential.monitoring }}"
    msecrets_source: "confidential"
  when: confidential.monitoring is defined

- name: "Check monitoring secrects ..."
  assert:
    that:
      - msecrets[agent] is defined
      - msecrets[agent].auth is defined
      - msecrets[agent].token is defined
  loop: "{{ monitoring_config.host }}"
  loop_control:
    loop_var: agent
    label: "{{ agent }}"

- name: "Install check-mk-agent-push ..."
  include_role:
    name: wyga/install-package-override
  vars:
    install_packages:
      - check-mk-agent-push

- name: "Generate configuration ..."
  template:
    src: "monitoring/config"
    dest: "/etc/check_mk/check-mk-agent-push"
    owner: root
    group: root
    mode: 0400
  vars:
    agents: "{{ monitoring_config.host }}"
    access: "{{ msecrets }}"

- name: "Cleanup ..."
  set_fact:
    monitoring:

- name: "Looking for check modules in /usr/lib/check_mk_agent/depot.d/check directory ..."
  find:
    paths: "/usr/lib/check_mk_agent/depot.d/check"
    file_type: file
  register: check_mk_checks_files

- name: "Looking for plugins in /usr/lib/check_mk_agent/depot.d/plugin directory ..."
  find:
    paths: "/usr/lib/check_mk_agent/depot.d/plugin"
    file_type: file
  register: check_mk_plugins_files

- name: "Prepare list of checks and plugins ..."
  set_fact:
    check_mk_checks: []
    enabled_check_mk_checks: []
    check_mk_plugins: []
    enabled_check_mk_plugins: []

- name: "Enumerate checks ..."
  set_fact:
    check_mk_checks: "{{ check_mk_checks + [ check.path | basename ] }}"
  loop: "{{ check_mk_checks_files.files }}"
  loop_control:
    loop_var: check
    label: "{{ check.path | basename }}"

- name: "Enumerate plugins ..."
  set_fact:
    check_mk_plugins: "{{ check_mk_plugins + [ plugin.path | basename ] }}"
  loop: "{{ check_mk_plugins_files.files }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin.path | basename }}"

- name: "Enumerate enabled checksd ..."
  set_fact:
    enabled_check_mk_checks: "{{ enabled_check_mk_checks + [ check ] }}"
  loop: "{{ monitoring_config.checks }}"
  loop_control:
    loop_var: check
    label: "{{ check }}"
  when: monitoring_config.checks is defined and check in check_mk_checks

- name: "Enable checks ..."
  file:
    src: "/usr/lib/check_mk_agent/depot.d/check/{{ check }}"
    dest: "/usr/lib/check_mk_agent/local/{{ check }}"
    state: link
    force: true
  loop: "{{ enabled_check_mk_checks }}"
  loop_control:
    loop_var: check
    label: "{{ check }}"

- name: "Looking for unmanaged checks in /usr/lib/check_mk_agent/local directory ..."
  find:
    paths: "/usr/lib/check_mk_agent/local"
    file_type: any
    excludes: "{{ omit if enabled_check_mk_checks | length == 0 else enabled_check_mk_checks }}"
  register: cleanup_check_mk_checks

- name: "Delete unmanaged checks form /usr/lib/check_mk_agent/local ..."
  file:
    path: "{{ cleanup.path }}"
    state: absent
  loop: "{{ cleanup_check_mk_checks.files }}"
  loop_control:
    loop_var: cleanup
    label: "{{ cleanup.path | basename }}"

- name: "Enumerate enabled plugins ..."
  set_fact:
    enabled_check_mk_plugins: "{{ enabled_check_mk_plugins + [ plugin ] }}"
  loop: "{{ monitoring_config.plugins }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin }}"
  when: monitoring_config.plugins is defined and plugin in check_mk_plugins

- name: "Enable plugins ..."
  file:
    src: "/usr/lib/check_mk_agent/depot.d/plugin/{{ plugin }}"
    dest: "/usr/lib/check_mk_agent/plugins/{{ plugin }}"
    state: link
    force: true
  loop: "{{ enabled_check_mk_plugins }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin }}"

- name: "Looking for unmanaged plugins in /usr/lib/check_mk_agent/plugins directory ..."
  find:
    paths: "/usr/lib/check_mk_agent/plugins"
    file_type: any
    excludes: "{{ omit if enabled_check_mk_plugins | length == 0 else enabled_check_mk_plugins }}"
  register: cleanup_check_mk_plugins

- name: "Delete unmanaged plugins form /usr/lib/check_mk_agent/plugins ..."
  file:
    path: "{{ cleanup.path }}"
    state: absent
  loop: "{{ cleanup_check_mk_plugins.files }}"
  loop_control:
    loop_var: cleanup
    label: "{{ cleanup.path | basename }}"

- name: "Cleanup old configuration file ..."
  file:
    path: "/etc/check_mk/check-mk-passive-agent"
    state: absent

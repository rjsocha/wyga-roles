- name: "Workstation / Install / Prepare ..."
  set_fact:
    workstation_install: []

- name: "Workstation / Install / Deskflow ..."
  set_fact:
    workstation_install: "{{ workstation_install + ['deskflow-control'] }}"
  when: host.setup.workstation.deskflow is defined and host.setup.workstation.deskflow.control|default(true)

- name: "Workstation / Install / Ordered Autostart ..."
  set_fact:
    workstation_install: "{{ workstation_install + ['ordered-autostart'] }}"
  when: host.setup.workstation.autostart is defined

- name: "Workstation / Install / Woke Poke ..."
  set_fact:
    workstation_install: "{{ workstation_install + ['woke-poke'] }}"
  when: host.setup.workstation.wol is defined

- name: "Workstation / Install ..."
  include_role:
    name: wyga/install-package-override
  vars:
    packages: "{{ workstation_install }}"
  when: workstation_install | length > 0

- name: "Workstation / GDM Configuration ..."
  template:
    src: gdm/daemon.conf
    dest: /etc/gdm3/daemon.conf
    group: root
    owner: root
    mode: 0644

- name: "Workstation / GDM Configuration ..."
  template:
    src: gdm/policy
    dest: /usr/share/gdm/dconf/99-host-policy
    group: root
    owner: root
    mode: 0644

- name: "Workstation / Deskflow ..."
  block:
    - name: "Workstation / Check  ..."
      assert:
        that:
          host.setup.workstation.deskflow.name is defined

    - name: "Workstation / Deskflow / Directory ..."
      file:
        path: "/opt/deskflow-control"
        state: directory

    # Client configuration
    - name: "Workstation / Deskflow GDM Setup ..."
      template:
        src: "deskflow/client/{{ deskflow }}"
        dest: "/opt/deskflow-control/{{ deskflow }}"
        group: root
        owner: root
        mode: 0755
      vars:
        deskflow_name:  "{{ host.setup.workstation.deskflow.name }}"
        deskflow_host:  "{{ host.setup.workstation.deskflow.host }}"
        deskflow_debug: "{{ host.setup.workstation.deskflow.debug | default('INFO') }}"
      loop:
        - start-gdm
        - start
      loop_control:
        loop_var: deskflow
        label: "{{ deskflow }}"
      when: host.setup.workstation.deskflow.control | default(true) and host.setup.workstation.deskflow.host is defined

    # Server configuration
    - name: "Workstation / Deskflow GDM Setup ..."
      template:
        src: "deskflow/server/{{ deskflow }}"
        dest: "/opt/deskflow-control/{{ deskflow }}"
        group: root
        owner: root
        mode: 0755
      vars:
        deskflow_name:  "{{ host.setup.workstation.deskflow.name }}"
        deskflow_debug: "{{ host.setup.workstation.deskflow.debug | default('INFO') }}"
      loop:
        - start-gdm
        - start
      loop_control:
        loop_var: deskflow
        label: "{{ deskflow }}"
      when: host.setup.workstation.deskflow.control | default(true) and host.setup.workstation.deskflow.host is not defined

    - name: "Workstation / Deskflow Server Configuration ..."
      template:
        src: "deskflow/server/template/{{ host.setup.workstation.deskflow.layout.template }}"
        dest: "/opt/deskflow-control/config"
        group: root
        owner: root
        mode: 0644
      vars:
        nodes:  "{{ host.setup.workstation.deskflow.layout.nodes }}"
      when: host.setup.workstation.deskflow.control | default(true) and host.setup.workstation.deskflow.host is not defined and host.setup.workstation.deskflow.layout.template is defined
  when: host.setup.workstation.deskflow is defined

- name: "Workstation / GNOME Settings ..."
  block:
    - name: "Workstation / GNOME Settings ..."
      remote_user: "{{ host.setup.workstation.user }}"
      command:
        cmd: dconf load /
        stdin: "{{ lookup('ansible.builtin.template', 'dconf/config') }}"
        creates: ~/.config/.configured

    - name: "Workstation / GNOME Settings / Marker ..."
      remote_user: "{{ host.setup.workstation.user }}"
      copy:
        content: "#CONFIGURED"
        dest: ~/.config/.configured
        force: false
      register: first_setup

    - name: "Workstation / XDG ..."
      block:
        - name: "Workstation / GNOME Avatar ..."
          copy:
            src: "account/avatar.png"
            dest: "/var/lib/AccountsService/icons/{{ host.setup.workstation.user }}"
            mode: 0644

        - name: "Workstation / GNOME User Configuration ..."
          template:
            src: "account/user"
            dest: "/var/lib/AccountsService/users/{{ host.setup.workstation.user }}"
            group: root
            owner: root
            mode: 0400
          vars:
            username: "{{ host.setup.workstation.user }}"

        - name: "Workstation / Applications configuration ..."
          set_fact:
            workstation_app:
              - "flameshot/flameshot.ini"

        - name: "Workstation / Applications configuration / Directory ..."
          remote_user: "{{ host.setup.workstation.user }}"
          file:
            path: "~/.config/{{ app | dirname }}"
            state: directory
          loop: "{{ workstation_app }}"
          loop_control:
            loop_var: app
            label: "~/.config/{{ app | dirname }}"

        - name: "Workstation / Applications configuration / Files ..."
          remote_user: "{{ host.setup.workstation.user }}"
          copy:
            src: "app/{{ app }}"
            dest: "~/.config/{{ app }}"
          loop: "{{ workstation_app }}"
          loop_control:
            loop_var: app
            label: "~/.config/{{ app }}"

        - name: "Workstation / XDG / Directories ..."
          set_fact:
            xdg_relocate:
              - Desktop
              - Templates
              - Public
              - Music
              - Pictures
              - Videos
            xdg_create:
              - Documents
              - Downloads

        - name: "Workstation / XDG / Directories / Relocate ..."
          remote_user: "{{ host.setup.workstation.user }}"
          file:
            path: "~/.xdg/{{ directory }}"
            state: directory
          loop: "{{ xdg_relocate }}"
          loop_control:
            loop_var: directory
            label: "~/.xdg/{{ directory }}"

        - name: "Workstation / XDG / Directories / Create ..."
          remote_user: "{{ host.setup.workstation.user }}"
          file:
            path: "~/{{ directory }}"
            state: directory
          loop: "{{ xdg_create }}"
          loop_control:
            loop_var: directory
            label: "~/{{ directory }}"

        - name: "Workstation / XDG / Bookmarks ..."
          remote_user: "{{ host.setup.workstation.user }}"
          file:
            path: ~/.config/gtk-3.0
            state: directory

        - name: "Workstation / XDG / Bookmarks / Setup ..."
          remote_user: "{{ host.setup.workstation.user }}"
          template:
            src: xdg/bookmarks
            dest: ~/.config/gtk-3.0/bookmarks

        - name: "Workstation / XDG / Configuration ..."
          remote_user: "{{ host.setup.workstation.user }}"
          template:
            src: xdg/user-dirs.dirs
            dest: ~/.config/user-dirs.dirs

        - name: "Workstation / XDG / Directories / Cleanup ..."
          remote_user: "{{ host.setup.workstation.user }}"
          file:
            path: "~/{{ directory }}"
            state: absent
          loop: "{{ xdg_relocate }}"
          loop_control:
            loop_var: directory
            label: "~/{{ directory }}"

        - name: "Workstation / Cleanup ..."
          remote_user: "{{ host.setup.workstation.user }}"
          file:
            path: "~/{{ remove }}"
            state: absent
          loop:
            - .face
            - .face.icon
            - .config/user-dirs.locale
          loop_control:
            loop_var: remove
            label: "~/{{ remove }}"
      when: first_setup.changed

    - name: "Workstation / Autostart ..."
      block:
        - name: "Workstation / Autostart / Configure  ..."
          remote_user: "{{ host.setup.workstation.user }}"
          template:
            src: autostart/config
            dest: ~/.config/ordered-autostart
          vars:
            autostart:  "{{ host.setup.workstation.autostart }}"

        - name: "Workstation / GNOME Autostart / Cleanup ..."
          remote_user: "{{ host.setup.workstation.user }}"
          file:
            path: "~/.config/autostart/{{ autostart }}.desktop"
            state: absent
          loop: "{{ host.setup.workstation.autostart }}"
          loop_control:
            loop_var: autostart
            label: "{{ autostart }}.desktop"
      when: host.setup.workstation.autostart is defined

    - name: "Workstation / Wake On Lan ..."
      block:
        - name: "Workstation / WOL / Configure  ..."
          remote_user: "{{ host.setup.workstation.user }}"
          template:
            src: wol/woke-poke
            dest: ~/.config/woke-poke
          vars:
            nodes:  "{{ host.setup.workstation.wol }}"
      when: host.setup.workstation.wol is defined
  when: host.setup.workstation.user is defined

- name: "Workstation / Install ..."
  block:
    - name: "Workstation / Install / Ansible ..."
      include_role:
        name: wyga/install/ansible
      when: host.setup.workstation.install | intersect([ 'ansible' ]) | length > 0

    - name: "Workstation / Install / Slack ..."
      include_role:
        name: wyga/install/slack-desktop
      when: host.setup.workstation.install | intersect([ 'slack', 'slack-desktop' ]) | length > 0
  when: host.setup.workstation.install is defined

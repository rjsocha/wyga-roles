- name: "Traefik Ingress / Gather installed package facts ..."
  ansible.builtin.package_facts:
    manager: auto

- name: "Traefik Ingress / Install ..."
  include_role:
    name: wyga/install-package-override
  vars:
    packages:
      - traefik-ingress
  when: "'traefik-ingress' is not in ansible_facts.packages"

- name: "Traefik Ingress / Setup / Load IngressConfig ..."
  set_fact:
    IngressConfig: "{{ host.setup.ingress }}"

- name: "Traefik Ingress / Setup / Update runtime directory ..."
  set_fact:
    IngressConfig: "{{ host.setup.ingress | combine( { 'runtime': { 'path': ingress_default_runtime_dir }}, recursive=True ) }}"
  when: IngressConfig.runtime.path is not defined

- name: "Traefik Ingress / Process ..."
  set_fact:
    IngressConfig: "{{ IngressConfig | process_ingress_config }}"

#- debug: var=IngressConfig

- name: "Traefik Ingress / Config / Create site directory ..."
  file:
    path: "{{ IngressConfig.runtime.path }}"
    state: directory
    mode: 0750
    owner: root
    group: traefik-ingress

- name: "Traefik Ingress / Config / Create runtime directory ..."
  file:
    path: "{{ IngressConfig.runtime.path }}/runtime"
    state: directory
    mode: 0750
    owner: root
    group: traefik-ingress

- name: "Traefik Ingress / Config / Main configuration ..."
  template:
    src: "traefik/main"
    dest: "{{ IngressConfig.runtime.path }}/config.yaml"
    owner: root
    group: traefik-ingress
    mode: 0640
  notify:
    - traefik-ingress-restart

- name: "Traefik Ingress / Config / Runtime configuration ..."
  template:
    src: "traefik/runtime"
    dest: "{{ IngressConfig.runtime.path }}/runtime/config.yaml"
    owner: root
    group: traefik-ingress
    mode: 0640
  notify:
    - traefik-ingress-restart

- name: "Traefik Ingress / Config / DNS Secrects ..."
  block:
    - name: "Traefik Ingress / Config / Create env directory ..."
      file:
        path: "{{ IngressConfig.runtime.path }}/env"
        state: directory
        mode: 0750
        owner: root
        group: traefik-ingress
    - name: "Traefik Ingress / Config / Secret / Env ..."
      copy:
        dest: "{{ IngressConfig.runtime.path }}/env/secret"
        content: "{{ ( confidential.ingress.dns | dict2items | map(attribute='key') | zip( confidential.ingress.dns | dict2items | map(attribute='value') | map('quote')) ) | map('join', '=') | join('\n') + '\n' }}"
        owner: root
        group: root
        mode: 0600
      notify:
        - traefik-ingress-restart
  when: confidential.ingress.dns is defined

- name: "Traefik Ingress / Config / Purge DNS Secrects ..."
  file:
    path: "{{ IngressConfig.runtime.path }}/env"
    state: absent
  when: confidential.ingress.dns is not defined

- name: "Traefik Ingress / ACME / Create list of runtime files to remove ..."
  find:
    paths: "/var/lib/traefik-ingress"
    file_type: any
    excludes: "{{ IngressConfig.acme.files }}"
  register: ingress_acme_cleanup

- name: "Traefik Ingress / ACME / Remove unmanaged files ..."
  file:
    path: "{{ cleanup.path }}"
    state: absent
  loop: "{{ ingress_acme_cleanup.files }}"
  loop_control:
    loop_var: cleanup
    label: "{{ cleanup.path | basename }}"
  notify:
    - traefik-ingress-restart

- name: "Traefik Ingress / Vhost / Create list of runtime files to remove ..."
  find:
    paths: "{{ IngressConfig.runtime.path }}/runtime"
    file_type: any
    excludes: "{{ IngressConfig.files + IngressConfig.runtime.keep | default([]) }}"
  register: ingress_runtime_cleanup

- name: "Traefik Ingress / Vhost / Remove unmanaged files ..."
  file:
    path: "{{ cleanup.path }}"
    state: absent
  loop: "{{ ingress_runtime_cleanup.files }}"
  loop_control:
    loop_var: cleanup
    label: "{{ cleanup.path | basename }}"
  notify:
    - traefik-ingress-restart

- name: "Traefik Ingress / Redirect / Generate configuration ..."
  template:
    src: "traefik/redirect"
    dest: "{{ IngressConfig.runtime.path }}/runtime/{{ redirect.value.file }}"
    owner: root
    group: traefik-ingress
    mode: 0640
  notify:
    - traefik-ingress-restart
  loop: "{{ IngressConfig.redirect | dict2items }}"
  loop_control:
    loop_var: redirect
    label: "{{ redirect.value.file }}"
  when: IngressConfig.redirect is defined

- name: "Traefik Ingress / Vhost / Generate configuration ..."
  template:
    src: "traefik/vhost"
    dest: "{{ IngressConfig.runtime.path }}/runtime/{{ vhost.file }}"
    owner: root
    group: traefik-ingress
    mode: 0640
  notify:
    - traefik-ingress-restart
  loop: "{{ IngressConfig.config }}"
  loop_control:
    loop_var: vhost
    label: "{{ vhost.file }}"
  when: IngressConfig.config is defined

- name: "Traefik Ingress / ACME / Mode update ..."
  copy:
    dest: "{{ IngressConfig.runtime.path }}/acme-mode"
    content: "{{ IngressConfig.acme.staging | default(false) | ternary('staging','production') }}"
    mode: 0644
    owner: root
    group: root
  register: acme_changed
  notify:
    - traefik-ingress-restart

- name: "Traefik Ingress / ACME / Mode change ..."
  block:
    - name: "Traefik Ingress / ACME / Clear ACME state files  1/2 ..."
      find:
        paths: /var/lib/traefik-ingress/
        patterns: "*.json"
      register: acme_state_files

    - name: "Traefik Ingress / ACME / Clear ACME state files  2/2 ..."
      file:
        path: "{{ acme_state.path }}"
        state: absent
      loop: "{{ acme_state_files.files }}"
      loop_control:
        loop_var: acme_state
        label: "{{ acme_state.path }}"
      notify:
        - traefik-ingress-restart
  when: acme_changed.changed

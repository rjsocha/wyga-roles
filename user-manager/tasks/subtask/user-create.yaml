---
- name: "Update/create primary gid for user {{ target.key }}"
  block:
    - name: "Create/update group {{ target.key }}"
      ansible.builtin.group:
        name: "{{ target.key }}"
        gid: "{{ target.value.gid }}"
        state: present
  when: target.value.gid is defined and target.value.gid|int > 0

- name: "Create/update user {{ target.key }}"
  ansible.builtin.user:
    name: "{{ target.key }}"
    comment: "{{ target.value.gecos | default(omit) }}"
    groups: "{{ target.value.groups | list }}"
    shell: "{{target.value.shell}}"
    create_home: true
    home: "{{ target.value.home | default(omit) }}"
    uid: "{{ target.value.uid | default(omit) }}"
    password: "{{ target.value.password | default('!') }}"
    update_password: "{{ target.value.update_password | default('on_create') }}"
    state: present

- name: "Update user primary group {{ target.key }}"
  ansible.builtin.user:
    name: "{{ target.key }}"
    group: "{{ target.value.group | default(target.key) }}"

- name: "Disable linger for user {{ target.key }} ..."
  ansible.builtin.command: loginctl disable-linger {{ target.key }}
  args:
    removes: "/var/lib/systemd/linger/{{ target.key }}"
  when: not ((target.value.linger | default(false)) | bool)

- name: "Enable linger for user {{ target.key }} ..."
  ansible.builtin.command: loginctl enable-linger {{ target.key }}
  args:
    creates: "/var/lib/systemd/linger/{{ target.key }}"
  when: (target.value.linger | default(false)) | bool

- name: "Generate SSH key on demand ..."
  include_tasks: "ssh-keygen.yaml"
  loop: "{{ target.value.keygen }}"
  loop_control:
    loop_var: keygen
  when: target.value.keygen is defined

- name: "Create managed user state directory ..."
  file:
    path: "{{wum_user_managed}}"
    state: directory

- name: "Check if user is already managed ..."
  stat:
    path: "{{wum_user_managed }}/{{target.key}}"
  register: is_managed

- name: "Force password change on next login ..."
  command: passwd -e {{ target.key }}
  when: not is_managed.stat.exists and target.value.password is defined and target.value.forceChange

- name: "Mark user {{ target.key }} as managed ..."
  copy:
    content: "{{ target.key }}"
    dest: "{{wum_user_managed }}/{{target.key}}"
    mode: "0400"
    owner: "root"
    group: "root"
  when: target.key != "root" and target.value.unmanaged | default(false) == false

- name: "Remove managed mark for user {{ target.key }} ..."
  file:
    path: "{{wum_user_managed }}/{{target.key}}"
    state: absent
  when: target.key != "root" and target.value.unmanaged | default(false) == true
